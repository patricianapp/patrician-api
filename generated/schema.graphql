interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

input CollectionAddInputItem {
  artist: String
  artistId: String
  customTitle: String
  customArtist: String
  dislikes: [String!]
  genres: [String!]
  likes: [String!]
  mbid: String
  plays: Float
  rating: String
  releaseDate: String
  review: String
  rymId: String
  spotifyId: String
  tags: [String!]
  title: String
}

type CollectionAddResponse {
  itemsAdded: [CollectionItem!]!
  itemsUpdated: [CollectionItem!]!
}

type CollectionItem implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  customTitle: String
  customArtist: String
  user: User
  userId: String!
  itemDetails: Item
  itemDetailsId: String!
  plays: Int
  mbid: String
  reviews: [Review!]
  artist: String!
  title: String!
  rating: String!
  reviewBody: String!
}

input CollectionItemCreateInput {
  customTitle: String
  customArtist: String
  userId: ID!
  itemDetailsId: ID!
  plays: Float
  mbid: String
}

enum CollectionItemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  customTitle_ASC
  customTitle_DESC
  customArtist_ASC
  customArtist_DESC
  userId_ASC
  userId_DESC
  itemDetailsId_ASC
  itemDetailsId_DESC
  plays_ASC
  plays_DESC
  mbid_ASC
  mbid_DESC
}

input CollectionItemUpdateInput {
  customTitle: String
  customArtist: String
  userId: ID
  itemDetailsId: ID
  plays: Float
  mbid: String
}

input CollectionItemWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  customTitle_eq: String
  customTitle_contains: String
  customTitle_startsWith: String
  customTitle_endsWith: String
  customTitle_in: [String!]
  customArtist_eq: String
  customArtist_contains: String
  customArtist_startsWith: String
  customArtist_endsWith: String
  customArtist_in: [String!]
  userId_eq: ID
  userId_in: [ID!]
  itemDetailsId_eq: ID
  itemDetailsId_in: [ID!]
  plays_eq: Int
  plays_gt: Int
  plays_gte: Int
  plays_lt: Int
  plays_lte: Int
  plays_in: [Int!]
  mbid_eq: String
  mbid_contains: String
  mbid_startsWith: String
  mbid_endsWith: String
  mbid_in: [String!]
}

input CollectionItemWhereUniqueInput {
  id: ID!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Item implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  mbid: String
  rymId: Int
  spotifyId: String
  title: String!
  disambiguation: String
  artist: String!
  coverArt: String
  collectionItem: [CollectionItem!]
}

input ItemCreateInput {
  mbid: String
  rymId: Float
  spotifyId: String
  title: String!
  disambiguation: String
  artist: String!
  coverArt: String
}

enum ItemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  mbid_ASC
  mbid_DESC
  rymId_ASC
  rymId_DESC
  spotifyId_ASC
  spotifyId_DESC
  title_ASC
  title_DESC
  disambiguation_ASC
  disambiguation_DESC
  artist_ASC
  artist_DESC
  coverArt_ASC
  coverArt_DESC
}

input ItemUpdateInput {
  mbid: String
  rymId: Float
  spotifyId: String
  title: String
  disambiguation: String
  artist: String
  coverArt: String
}

input ItemWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  mbid_eq: String
  mbid_contains: String
  mbid_startsWith: String
  mbid_endsWith: String
  mbid_in: [String!]
  rymId_eq: Int
  rymId_gt: Int
  rymId_gte: Int
  rymId_lt: Int
  rymId_lte: Int
  rymId_in: [Int!]
  spotifyId_eq: String
  spotifyId_contains: String
  spotifyId_startsWith: String
  spotifyId_endsWith: String
  spotifyId_in: [String!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  disambiguation_eq: String
  disambiguation_contains: String
  disambiguation_startsWith: String
  disambiguation_endsWith: String
  disambiguation_in: [String!]
  artist_eq: String
  artist_contains: String
  artist_startsWith: String
  artist_endsWith: String
  artist_in: [String!]
  coverArt_eq: String
  coverArt_contains: String
  coverArt_startsWith: String
  coverArt_endsWith: String
  coverArt_in: [String!]
}

input ItemWhereUniqueInput {
  id: ID!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createCollectionItem(data: CollectionItemCreateInput!): CollectionItem!
  addToCollection(data: [CollectionAddInputItem!]!): CollectionAddResponse!
  createManyCollectionItems(data: [CollectionItemCreateInput!]!): [CollectionItem!]!
  updateCollectionItem(data: CollectionItemUpdateInput!, where: CollectionItemWhereUniqueInput!): CollectionItem!
  removeFromCollection(itemId: String!): StandardDeleteResponse!
  createItem(data: ItemCreateInput!): Item!
  createManyItems(data: [ItemCreateInput!]!): [Item!]!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item!
  deleteItem(where: ItemWhereUniqueInput!): StandardDeleteResponse!
  createReview(data: ReviewCreateInput!): Review!
  createManyReviews(data: [ReviewCreateInput!]!): [Review!]!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): StandardDeleteResponse!
  createUser(data: UserCreateInput!): User!
  getAuthToken(password: String!, username: String!): String!
  createManyUsers(data: [UserCreateInput!]!): [User!]!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): StandardDeleteResponse!
  hardDeleteUser(id: String!): String!
}

type PageInfo {
  limit: Float!
  offset: Float!
  totalCount: Float!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  collectionItems(offset: Int, limit: Int = 50, where: CollectionItemWhereInput, orderBy: CollectionItemOrderByInput): [CollectionItem!]!
  collection(query: String, user: String!, offset: Int, limit: Int = 50, where: CollectionItemWhereInput, orderBy: CollectionItemOrderByInput): [CollectionItem!]!
  collectionItem(where: CollectionItemWhereUniqueInput!): CollectionItem!
  items(offset: Int, limit: Int = 50, where: ItemWhereInput, orderBy: ItemOrderByInput): [Item!]!
  item(where: ItemWhereUniqueInput!): Item!
  reviews(offset: Int, limit: Int = 50, where: ReviewWhereInput, orderBy: ReviewOrderByInput): [Review!]!
  review(where: ReviewWhereUniqueInput!): Review!
  users(offset: Int, limit: Int = 50, where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
  user(where: UserWhereUniqueInput!): User!
  viewer: User!
}

type Review implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  collectionItem: CollectionItem
  collectionItemId: String!
  rating: String
  title: String
  body: String
}

input ReviewCreateInput {
  collectionItemId: ID!
  rating: String
  title: String
  body: String
}

enum ReviewOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  collectionItemId_ASC
  collectionItemId_DESC
  rating_ASC
  rating_DESC
  title_ASC
  title_DESC
  body_ASC
  body_DESC
}

input ReviewUpdateInput {
  collectionItemId: ID
  rating: String
  title: String
  body: String
}

input ReviewWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  collectionItemId_eq: ID
  collectionItemId_in: [ID!]
  rating_eq: String
  rating_contains: String
  rating_startsWith: String
  rating_endsWith: String
  rating_in: [String!]
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  body_eq: String
  body_contains: String
  body_startsWith: String
  body_endsWith: String
  body_in: [String!]
}

input ReviewWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}

type User implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  username: String!
  email: String
  bio: String
  accountSettings: JSONObject
  collection(query: String): [CollectionItem!]
}

input UserCreateInput {
  username: String!
  email: String
  password: String!
  bio: String
  accountSettings: JSONObject
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  bio_ASC
  bio_DESC
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  bio: String
  accountSettings: JSONObject
}

input UserWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  username_eq: String
  username_contains: String
  username_startsWith: String
  username_endsWith: String
  username_in: [String!]
  email_eq: String
  email_contains: String
  email_startsWith: String
  email_endsWith: String
  email_in: [String!]
  bio_eq: String
  bio_contains: String
  bio_startsWith: String
  bio_endsWith: String
  bio_in: [String!]
  accountSettings_json: JSONObject
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
